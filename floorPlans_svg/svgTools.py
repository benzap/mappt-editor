'''
Includes a bunch of tools to fix up an svg file, and parse pieces that
would normally be a lot more difficult to parse

PathPoint represents a point on the path within an svg Path element

MoveToAbsolute is a slightly different MoveTo point
MoveTo is a moveto point
LineTo is a lineto point
ClosePath is a closepath point

http://www.w3.org/TR/SVG/paths.html#Introduction


'''
import re

class PathPoint:
    def __init__(self, position = [0., 0.]):
        self.position = position
        self.theType = ""
        self.__repr__ = self.__str__


    def __str__(self):
        return "{0[0]:f},{0[1]:f} ".format(self.position);

class MoveTo(PathPoint):
    def __init__(self, position = [0., 0.]):
        PathPoint.__init__(self, position)
        self.theType = "m"
        
    def __str__(self):
        return "m " + PathPoint.__str__(self)

class MoveToAbsolute(PathPoint):
    def __init__(self, position = [0., 0.]):
        PathPoint.__init__(self, position)
        self.theType = "M"
        
    def __str__(self):
        return "M " + PathPoint.__str__(self)

class LineTo(PathPoint):
    pass

class ClosePath(PathPoint):
    def __init__(self):
        self.theType = "z"
    def __str__(self):
        return "z "

'''
Used to parse the "d" attribute within svg path strings. Returns a
list of pathpoint objects.
'''
def parsePath_d_attribute(theString):
    regex_isMoveToAbsolute = re.compile(r"^M +([-0-9]+\.?[0-9]*), ?([-0-9]+\.?[0-9]*) +")
    regex_isMoveTo = re.compile(r"^m +([-0-9]+\.?[0-9]*), ?([-0-9]+\.?[0-9]*) +")
    regex_isLineTo = re.compile(r"^l +([-0-9]+\.?[0-9]*), ?([-0-9]+\.?[0-9]*) +| *([-0-9]+\.?[0-9]*), ?([-0-9]+\.?[0-9]*) *")
    regex_isClosePath = re.compile(r"^z *")

    parsedList = []
    while len(theString):
        theString = theString.strip()
        mAbsReg = regex_isMoveToAbsolute.match(theString)
        mReg = regex_isMoveTo.match(theString)
        lReg = regex_isLineTo.match(theString)
        cReg = regex_isClosePath.match(theString)

        if mAbsReg:
            positions = [ float(i) for i in mAbsReg.groups() ]
            parsedList.append(MoveToAbsolute(positions))
            theString = theString[mAbsReg.end():]

        elif mReg:
            positions = [ float(i) for i in mReg.groups() ]
            parsedList.append(MoveTo(positions))
            theString = theString[mReg.end():]

        elif lReg:
            #filter out our None elements
            positions = filter(lambda i: i, lReg.groups())
            positions = [ float(i) for i in positions]

            parsedList.append(LineTo(positions))
            theString = theString[lReg.end():]

        elif cReg:
            parsedList.append(ClosePath())
            theString = theString[cReg.end():]

        else:
            print theString
            print "broke"
            break
        
    return parsedList


if __name__ == "__main__":

    y = "m 669.38916,402.10886 19.84959,0 0,23.20874 -19.84959,0 z m -394.24335,-229.33909 7.43087,0 0,-29.82527 7.32908,0 0,29.01093 m -56.83987,111.36549 16.55502,0 0,21.30559 -16.55502,0 z m 0.2879,21.44956 37.14083,0 0,22.31329 -37.14083,0 z m -18.42645,0.14395 18.57041,0 0,34.98147 -18.57041,0 z m 55.23062,14.43691 0,7.32907 1.22151,0 0,13.02948 5.29323,0 0,2.64661 6.10756,0 0,4.07171 -5.70039,0 0,51.09996 18.52628,0 11.40079,0 8.14342,0 0,-77.56608 z m 265.073,105.33506 43.76283,0 0,19.2902 -43.76283,0 z m -0.28791,-27.35177 44.33867,0 0,27.35177 -44.33867,0 z m -130.92762,-114.32331 0,-5.5986 1.93406,0 6.41295,0 1.42509,0 0,5.19143 90.49376,0 0,-22.4962 24.32847,0 6.20935,0 4.78426,0 0,23.51413 39.90276,0 0,-6.71832 14.1492,0 0,-30.13066 10.28106,0 0,-7.73625 0,-23.8195 35.1185,0 0,-29.31631 0,-13.23306 0,-87.33818 -143.12061,0 -15.47249,0 -46.21391,0 0,71.76389 -29.92707,0 0,55.98601 14.65815,0 0,17.50836 -14.65815,0 z M 275.2476,160.14747 l 0,81.63779 46.62108,0 0,36.23822 13.23306,0 0,4.68246 68.60831,0 0,-135.71201 0,-12.66819 0,-49.37714 -29.13474,0 -24.32868,0 -13.10006,0 -13.53193,0 0,41.45953 -18.57042,0 -8.92531,0 -20.72976,0 z m 129.0732,53.13582 14.86174,0 0,17.30477 -14.86174,0 z m 99.96048,47.02826 35.83105,0 0,23.61592 -35.83105,0 z m -207.04645,-133.95927 -21.07109,0 0,-40.717101 47.33362,0 0,33.388021 0,7.32908 -18.93345,0 m -61.07026,89.58301 31.74856,0 0,67.78319 -31.74856,0 z m -28.30377,0.19819 27.68763,0 0,15.4725 -27.68763,0 z m -0.81435,15.47251 28.50197,0 0,23.8195 -28.50197,0 z m 0,23.8195 28.29839,0 0,27.89122 -28.29839,0 z m 55.57885,55.17168 29.51989,0 0,8.95776 -29.51989,0 z m 0.20358,-9.77213 29.31631,0 0,9.56852 -29.31631,0 z m -17.05031,26.10984 17.80796,0 0,13.33489 -17.80796,0 z m -19.39149,-0.0509 19.34062,0 0,13.43665 -19.34062,0 z m 101.99084,-21.10584 0,-5.75827 131.00059,0 0,5.75827 8.06157,0 0,29.94299 35.70126,0 0,60.46181 -86.94984,0 -7.19783,0 -45.20241,0 -22.16933,0 -33.68586,0 0,-43.76283 0,-22.45724 0,-6.62201 0,-2.87914 4.89453,0 0,-14.68358 z m -20.15393,27.92759 31.38256,0 0,17.85063 -31.38256,0 z m -15.54733,-32.53421 19.57811,0 0,18.71437 -19.57811,0 z m 175.33926,-0.86374 35.70126,0 0,35.41335 -35.70126,0 z m -59.02225,116.31701 0,70.82669 -35.41335,0 0,6.90992 -59.88598,0 0,-8.06157 0,-21.5935 0,-4.60662 0,-7.19783 0,-8.34949 59.88598,0 0,-28.21551 26.20012,0 7.48574,0 z m -35.98916,-19.00228 44.62657,0 0,19.00228 -44.62657,0 z m 0.2879,90.11688 52.11232,0 0,42.32327 -52.11232,0 z m 41.74744,158.64029 18.13854,0 0,13.81984 -18.13854,0 z m 80.61575,14.39563 39.44413,0 0,20.72976 -39.44413,0 z m 153.45782,48.65741 46.35406,0 0,27.06386 -46.35406,0 z m 0,-16.12317 30.80674,0 0,16.12315 -30.80674,0 z m 0,-15.83527 28.50343,0 0,16.12315 -28.50343,0 z m 0.28791,-16.98687 28.50342,0 0,17.85063 -28.50342,0 z m -105.66419,-38.58039 86.94984,0 0,37.14083 -86.94984,0 z m -0.2879,-48.94525 86.94984,0 0,48.94528 -86.94984,0 z m 0.57581,-46.92987 86.37401,0 0,47.21779 -86.37401,0 z m 0.5758,-67.94757 85.79819,0 0,67.94756 -85.79819,0 z m 41.74744,-33.39795 43.76283,0 0,34.54961 -43.76283,0 z m 5.7583,-20.72977 48.08153,0 0,20.72977 -48.08153,0 z m -47.21784,-21.5935 27.63969,0 0,14.39567 -27.63969,0 z m 0,-16.41107 27.35177,0 0,16.41106 -27.35177,0 z m -0.8637,-22.16935 27.92759,0 0,22.74516 -27.92759,0 z m -40.5958,0.28794 40.8837,0 0,51.82441 -40.8837,0 z m 0.2879,-14.9715 23.89681,0 0,14.68358 -23.89681,0 z m 0,-27.92761 23.89681,0 0,28.50342 -23.89681,0 z m 23.60892,0 44.33866,0 0,42.61118 -44.33866,0 z m 59.02222,-0.86374 45.77823,0 0,97.31472 -45.77823,0 z m 10.65283,-35.12543 35.70126,0 0,18.13855 -35.70126,0 z m -10.36493,0 10.07697,0 0,18.71437 -10.07697,0 z m -293.3837,-23.6089 21.59351,0 0,42.61118 -21.59351,0 z m -25.33639,26.48805 25.33638,0 0,15.54733 -25.33638,0 z m 0,-25.91221 25.33638,0 0,26.20011 -25.33638,0 z m 288.48919,-183.112914 75.72123,0 0,26.488031 -75.72123,0 z m -160.0798,25.912205 30.23091,0 0,27.927599 -30.23091,0 z m 0.2879,27.639689 29.943,0 0,44.05074 -29.943,0 z m -99.0422,-1.15166 17.85063,0 0,15.25941 -17.85063,0 z m -29.94299,-6.62201 21.88141,0 0,22.45724 -21.88141,0 z m 0.28791,-19.290193 60.1739,0"
    z = parsePath_d_attribute(y)
    print reduce(lambda i,j: str(i)+str(j),z)
